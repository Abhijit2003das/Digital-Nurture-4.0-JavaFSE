# Gateway server port
server.port=8080

# Spring Cloud Gateway Routing Configuration
# This section defines how incoming requests are routed to backend services.

# Define the first route (index 0)
spring.cloud.gateway.routes[0].id=load_balanced_route
# Use 'lb://' prefix to indicate a load-balanced service.
# 'example-service' is the logical name for our backend services that Spring Cloud LoadBalancer will resolve.
spring.cloud.gateway.routes[0].uri=lb://example-service
# Predicate to match requests starting with /loadbalanced/.
# For instance, a request to http://localhost:8080/loadbalanced/hello will be routed.
spring.cloud.gateway.routes[0].predicates[0]=Path=/loadbalanced/**
# Add a filter to strip the prefix before forwarding to the backend.
# 'StripPrefix=1' means remove the first path segment (which is 'loadbalanced').
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1

# Manual configuration for Spring Cloud LoadBalancer instances.
# This is necessary because we are not using a discovery service (like Eureka or Consul).
# The 'example-service' here must match the logical service name used in the 'uri' above.
spring.cloud.loadbalancer.instances.example-service[0].uri=http://localhost:8081
spring.cloud.loadbalancer.instances.example-service[1].uri=http://localhost:8082

# Optional: Logging configuration for detailed debugging and monitoring.
# Set logging level for Spring Cloud Gateway components to DEBUG for verbose logs.
logging.level.org.springframework.cloud.gateway=DEBUG
# Set logging level for Reactor Netty (the underlying HTTP client/server) to DEBUG.
logging.level.reactor.netty=DEBUG
# Set logging level for Spring Cloud LoadBalancer to DEBUG to see load balancing decisions.
logging.level.org.springframework.cloud.loadbalancer=DEBUG
# Set logging level for your application's base package to INFO (or DEBUG if needed).
logging.level.com.example.gatewayservice=INFO
