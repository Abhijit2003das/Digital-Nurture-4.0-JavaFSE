# Server port for the API Gateway
server.port=8080

# Enable Actuator endpoints for health checks
management.endpoints.web.exposure.include=*

# Spring Cloud Gateway Routes Configuration
spring.cloud.gateway.routes[0].id=my-service-route
# Target URL of the downstream service
spring.cloud.gateway.routes[0].uri=http://localhost:8081
spring.cloud.gateway.routes[0].predicates[0]=Path=/my-service/**
# Removes /my-service from the path before forwarding
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1
# Apply the CircuitBreaker filter to this route
spring.cloud.gateway.routes[0].filters[1]=CircuitBreaker=exampleCircuitBreaker

# Resilience4j Circuit Breaker Configuration
# Define an instance named 'exampleCircuitBreaker'
resilience4j.circuitbreaker.instances.exampleCircuitBreaker.registerHealthIndicator=true
# The sliding window type (COUNT_BASED or TIME_BASED)
resilience4j.circuitbreaker.instances.exampleCircuitBreaker.slidingWindowType=COUNT_BASED
# The size of the sliding window, used to calculate the failure rate
resilience4j.circuitbreaker.instances.exampleCircuitBreaker.slidingWindowSize=10
# The percentage of failures above which the circuit will open
resilience4j.circuitbreaker.instances.exampleCircuitBreaker.failureRateThreshold=50
# The duration (in seconds) the circuit will stay open before attempting to transition to half-open
resilience4j.circuitbreaker.instances.exampleCircuitBreaker.waitDurationInOpenState=5s
# The number of permitted calls when the circuit is in a half-open state
resilience4j.circuitbreaker.instances.exampleCircuitBreaker.permittedNumberOfCallsInHalfOpenState=3
# List of exceptions that are not considered failures and will not increase the failure rate
resilience4j.circuitbreaker.instances.exampleCircuitBreaker.ignoreExceptions=java.io.IOException
# List of exceptions that are considered failures and will increase the failure rate
resilience4j.circuitbreaker.instances.exampleCircuitBreaker.recordExceptions=org.springframework.web.client.HttpServerErrorException$InternalServerError

# Resilience4j Time Limiter Configuration (optional, but good practice for timeouts)
resilience4j.timelimiter.instances.exampleTimeLimiter.timeoutDuration=2s