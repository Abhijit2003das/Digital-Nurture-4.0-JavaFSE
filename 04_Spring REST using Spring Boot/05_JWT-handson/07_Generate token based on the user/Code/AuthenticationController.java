package com.cognizant.springlearn.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;

import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.crypto.SecretKey; // Import for SecretKey

// JJWT Imports - Updated for 0.11.x+
import io.jsonwebtoken.JwtBuilder;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys; // NEW: For generating secure keys

@RestController
public class AuthenticationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AuthenticationController.class);

    // It's good practice to generate and store your secret key securely, not hardcode it.
    // For demonstration, we generate it once. In production, load from config/env.
    private static final SecretKey SECRET_KEY = Keys.secretKeyFor(SignatureAlgorithm.HS256);
    // Alternatively, for a hardcoded string secret (LESS SECURE, but matches previous approach):
    // private static final SecretKey SECRET_KEY = Keys.hmacShaKeyFor("yourLongSecureSecretKeyHere123456789012345678901234567890".getBytes());
    // Ensure the byte array length is sufficient for HS256 (256 bits = 32 bytes)
    // The "secretkey" string from 0.9.0 is too short for HS256 if directly used in 0.11.x+ without conversion.
    // Let's use Keys.secretKeyFor which generates a secure random key.

    @GetMapping("/authenticate")
    public Map<String, String> authenticate(@RequestHeader("Authorization") String authHeader) {
        LOGGER.info("Start authenticate()");
        LOGGER.debug("Authorization Header: {}", authHeader);

        String username = getUser(authHeader);
        LOGGER.debug("Decoded Username: {}", username);

        // Generate the JWT token
        String generatedToken = generateJwt(username);
        LOGGER.debug("Generated JWT Token: {}", generatedToken);

        Map<String, String> response = new HashMap<>();
        response.put("token", generatedToken);

        LOGGER.info("End authenticate()");
        return response;
    }

    private String getUser(String authHeader) {
        LOGGER.debug("Start getUser() with authHeader: {}", authHeader);
        String encodedCredentials = authHeader.substring("Basic ".length());
        byte[] decodedBytes = Base64.getDecoder().decode(encodedCredentials);
        String decodedCredentials = new String(decodedBytes);
        String username = decodedCredentials.substring(0, decodedCredentials.indexOf(":"));
        LOGGER.debug("End getUser()");
        return username;
    }

    /**
     * Generates a JWT token for the given user using JJWT 0.11.x+ API.
     *
     * @param user The subject (username) for whom the token is generated.
     * @return The generated JWT token string.
     */
    private String generateJwt(String user) {
        LOGGER.info("Start generateJwt() for user: {}", user);

        // For JJWT 0.11.x+, use Jwts.builder() from the new fluent API
        // And sign with a SecretKey generated by Keys.
        String token = Jwts.builder()
                .setSubject(user)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + 1200000)) // 20 minutes from now
                .signWith(SECRET_KEY, SignatureAlgorithm.HS256) // Use the generated SecretKey
                .compact();

        LOGGER.debug("Generated JWT Token: {}", token);
        LOGGER.info("End generateJwt()");
        return token;
    }
}