package com.example.usertest;

import com.fasterxml.jackson.databind.ObjectMapper; // Import ObjectMapper
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType; // Import MediaType
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.transaction.annotation.Transactional;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post; // Import post
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertEquals; // Import assertEquals

/**
 * Integration Test for UserController that exercises the full stack
 * from the controller to the in-memory database.
 */
@SpringBootTest
@AutoConfigureMockMvc
@Transactional
public class UserControllerIntegrationTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ObjectMapper objectMapper; // Autowire ObjectMapper for JSON conversion

    @BeforeEach
    void setUp() {
        userRepository.deleteAll(); // Ensures no leftover data from previous test runs
    }

    /**
     * Test case for retrieving a user by ID when the user exists in the database.
     * This tests the entire flow: MockMvc -> UserController -> UserService -> UserRepository -> H2 Database.
     */
    @Test
    void testGetUser_UserFoundInDatabase() throws Exception {
        // Given: A user is actually saved in the H2 database
        User savedUser = new User(null, "Charlie Brown"); // ID will be generated by the database
        savedUser = userRepository.save(savedUser); // Save user to the actual in-memory database

        // Ensure the user was saved and has an ID
        assertNotNull(savedUser.getId(), "User ID should not be null after saving");

        // When: Perform a GET request to the /users/{id} endpoint
        mockMvc.perform(get("/users/{id}", savedUser.getId()))
               .andExpect(status().isOk()) // Expect HTTP 200 OK status
               .andExpect(jsonPath("$.id").value(savedUser.getId())) // Verify ID in JSON response
               .andExpect(jsonPath("$.name").value("Charlie Brown")); // Verify name in JSON response

        // Optional: Verify directly from the database that the user exists (just to double-check the setup)
        User fetchedFromDb = userRepository.findById(savedUser.getId()).orElse(null);
        assertNotNull(fetchedFromDb, "User should still be retrievable directly from the database");
    }

    /**
     * Test case for retrieving a user by ID when the user does not exist in the database.
     */
    @Test
    void testGetUser_UserNotFoundInDatabase() throws Exception {
        // Given: No user exists with this specific ID in the database
        Long nonExistentId = 999L; // Choose an ID unlikely to exist

        // When: Perform a GET request to the /users/{id} endpoint for a non-existent user
        mockMvc.perform(get("/users/{id}", nonExistentId))
               .andExpect(status().isNotFound()); // Expect HTTP 404 Not Found status

        // Optional: Verify directly from the database that no such user exists
        User fetchedFromDb = userRepository.findById(nonExistentId).orElse(null);
        assertNull(fetchedFromDb, "No user should be found in the database with this ID");
    }

    /**
     * Test case for creating a new user via the POST endpoint.
     * This tests the entire flow: MockMvc -> UserController -> UserService -> UserRepository -> H2 Database.
     */
    @Test
    void testCreateUser() throws Exception {
        // Given: A new user object to be created
        User newUser = new User(null, "Diana Prince"); // ID is null for creation

        // Convert the user object to JSON string
        String userJson = objectMapper.writeValueAsString(newUser);

        // When: Perform a POST request to /users with the user JSON in the body
        mockMvc.perform(post("/users")
                       .contentType(MediaType.APPLICATION_JSON) // Set content type to JSON
                       .content(userJson)) // Set the request body
               .andExpect(status().isOk()) // Expect HTTP 200 OK status (or isCreated() if controller returns 201)
               .andExpect(jsonPath("$.id").exists()) // Expect the response to have a generated ID
               .andExpect(jsonPath("$.name").value("Diana Prince")); // Expect the name to match

        // Then: Verify the user was actually saved in the database
        // We need to fetch by name as we don't know the ID initially.
        // In a real app, you might have a findByName method or parse the ID from the response.
        // For this test, let's assume we can retrieve by name for verification.
        // (Note: userRepository.findByName() would require adding a method to UserRepository)

        // For simplicity and to use existing methods, let's just confirm an entry exists
        // and its count is 1. Better to retrieve by the ID returned in the JSON response
        // if your controller returned 201 Created with Location header.
        // Since we return 200 OK and the object, we can parse the response if needed,
        // but for now, we'll verify directly via the name (less robust if names aren't unique).

        // Let's modify the assertion to get the ID from the response and then fetch.
        String responseContent = mockMvc.perform(post("/users")
                               .contentType(MediaType.APPLICATION_JSON)
                               .content(userJson))
                               .andReturn().getResponse().getContentAsString();

        // Parse the JSON response to get the generated ID
        User createdUserFromResponse = objectMapper.readValue(responseContent, User.class);
        assertNotNull(createdUserFromResponse.getId(), "Created user should have a generated ID");

        User savedInDb = userRepository.findById(createdUserFromResponse.getId()).orElse(null);
        assertNotNull(savedInDb, "User should be found in the database after creation");
        assertEquals("Diana Prince", savedInDb.getName(), "Saved user name should match");
    }
}
