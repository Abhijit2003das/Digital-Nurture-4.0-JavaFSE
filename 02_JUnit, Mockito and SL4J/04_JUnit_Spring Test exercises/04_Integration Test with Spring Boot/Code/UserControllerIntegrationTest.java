package com.example.usertest;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.transaction.annotation.Transactional;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

/**
 * Integration Test for UserController that exercises the full stack
 * from the controller to the in-memory database.
 */
@SpringBootTest // Loads the full Spring application context
@AutoConfigureMockMvc // Configures MockMvc for web layer testing within the full context
@Transactional // Ensures each test runs in a transaction and rolls back changes afterwards
public class UserControllerIntegrationTest {

    @Autowired
    private MockMvc mockMvc; // Used to perform HTTP requests to the controller

    @Autowired
    private UserRepository userRepository; // Direct access to repository to setup/verify data

    /**
     * Cleans up the database before each test to ensure a clean state.
     * While @Transactional helps, explicit cleanup can be useful for clarity
     * or if you want to avoid @Transactional for specific reasons.
     * For this setup, @Transactional is more important.
     */
    @BeforeEach
    void setUp() {
        userRepository.deleteAll(); // Ensures no leftover data from previous test runs
    }

    /**
     * Test case for retrieving a user by ID when the user exists in the database.
     * This tests the entire flow: MockMvc -> UserController -> UserService -> UserRepository -> H2 Database.
     */
    @Test
    void testGetUser_UserFoundInDatabase() throws Exception {
        // Given: A user is actually saved in the H2 database
        User savedUser = new User(null, "Charlie Brown"); // ID will be generated by the database
        savedUser = userRepository.save(savedUser); // Save user to the actual in-memory database

        // Ensure the user was saved and has an ID
        assertNotNull(savedUser.getId(), "User ID should not be null after saving");

        // When: Perform a GET request to the /users/{id} endpoint
        mockMvc.perform(get("/users/{id}", savedUser.getId()))
               .andExpect(status().isOk()) // Expect HTTP 200 OK status
               .andExpect(jsonPath("$.id").value(savedUser.getId())) // Verify ID in JSON response
               .andExpect(jsonPath("$.name").value("Charlie Brown")); // Verify name in JSON response

        // Optional: Verify directly from the database that the user exists (just to double-check the setup)
        User fetchedFromDb = userRepository.findById(savedUser.getId()).orElse(null);
        assertNotNull(fetchedFromDb, "User should still be retrievable directly from the database");
    }

    /**
     * Test case for retrieving a user by ID when the user does not exist in the database.
     */
    @Test
    void testGetUser_UserNotFoundInDatabase() throws Exception {
        // Given: No user exists with this specific ID in the database
        Long nonExistentId = 999L; // Choose an ID unlikely to exist

        // When: Perform a GET request to the /users/{id} endpoint for a non-existent user
        mockMvc.perform(get("/users/{id}", nonExistentId))
               .andExpect(status().isNotFound()); // Expect HTTP 404 Not Found status

        // Optional: Verify directly from the database that no such user exists
        User fetchedFromDb = userRepository.findById(nonExistentId).orElse(null);
        assertNull(fetchedFromDb, "No user should be found in the database with this ID");
    }
}
